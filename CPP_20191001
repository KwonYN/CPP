/***********************************************************************/
/*							[ 2019.10.01 화 ]						   */
/***********************************************************************/

// Class!!!!
// 구조체의 default는 public(개방형), Class는 Private이 기본형!! -> 재사용성이 더욱 좋다.

// 2.1 Class
#if 0
#include <iostream>
using namespace std;

class A
{// 접근지정자를 설정해주지 않으면 default로! -> private로
	int no = 5;	// int no = 5;는 "초기화?" => Nope! default 값을 지정해준다는 의미.
protected:
	char ch;
public:
	int sum;
	void sub(void);
};

void A::sub(void)
{
	cout << "A::sub" << endl;
}

void main(void)
{
	A aa;		// => 이렇게 개체가 선언( "선언" means "기억 공간에 할당해!" )됐을 때 비로소 공간이 할당 됨!

	cout << sizeof(aa) << endl;	// size가 12 == int no(4B)와 int sum(4B)를 기준으로 이것의 배수 -> 12B (함수는 공간 차지하지 않음!!)

	aa.sub();
}
#endif



// 2.2 생성자 함수 (Constructor) : 초기화를 위함!
// 다양한 생성자 함수 호출 및 할당 방법
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
	char ch;
public:
	A();
	A(int n);
	A(int n, char c);
};

A::A()
{
	cout << "Default Constructor" << endl;
}

A::A(int n)
{
	cout << "integer Constructor" << endl;

}

A::A(int n, char c)
{
	cout << "integer, character Constructor" << endl;

}

void main(void)
{
	A aa;	// Ctrl + F5 눌러보면, 디폴트 생성자가 실행됐음을 알 수 있다 => 클래스 개체 선언될 때, 생성자 호출됨!!
			// 원래 "A aa = A();"
			// "A aa();"와 같이 사용하지 않는 이유는 컴파일러에서 A타입의 리턴을 갖는 함수 aa를 찾는 것으로 받아들이기 때문!
	cout << endl;

	A bb(5); // 생성자 호출의 기본형은 원래 "A bb = A(5);" 이런 식임. 이거봐 함수 호출하는 방식이랑 똑같잖아!
			 // 이런 것들을 보아 생성자의 이름을 클래스의 이름과 똑같이 정해준 이유가 있군
	cout << endl;

	A cc(6, 'A'); // 생성자 호출의 기본형은 원래 "A cc = A(6, 'A');" 이런 식임.
	cout << endl;

	A arr[3];	// 0, 1, 2번째 클래스 배열이 모두 default 생성자 호출
	cout << endl;

	A brr[3] = { A(), A(5), A(6, 'B') };	// 각각 원하는 생성자 실행시킬 수도 있음!
	cout << endl;

	A crr[3]{ A(), A(5), A(6, 'B') };
	cout << endl;

	A * ap = new A(5);	// 동적 할당도 가능!
	// A * ap = (A *)malloc(sizeof(A));  =>  malloc으로 동적할당하는 것은 생성자 호출을 할 수 없어!
	// malloc은 공간의 할당은 해주지만, 생성자 호출 불가능. new와 delete를 이용하는 것이 더욱 효율적!
	delete ap;
	cout << endl;

	ap = new A[3]{A(), A(5), A(6, 'A')};	// Object는 3개 만들어지는 것

	delete[] ap;
	cout << endl;


	A * bp[3] = { new A(), new A(5), new A(10, 'A') };

	for (int i = 0; i < 3; i++) delete bp[i];
	cout << endl;

	
	A * cp[] = { new A(), new A(5), new A(10, 'A'), new A[2] };

	for (int i = 0; i < 3; i++) delete cp[i];

	cout << *(int *)((char *)cp[3] - 16) << endl;

	delete [] cp[3];
	cout << endl;

}

#endif


// 
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;		// 멤버 변수만 있고, 생성자 함수가 없는 경우!? => 그래도 컴파일러가 Default Constructor를 만들어 준다고 함.
public:
	//A(){};  없다고 해보자
	A(int n);	// 이것만 있다고 하면? => "기본 생성자가 없습니다." 라는 에러 메세지가 뜸
};				// => 생성자가 아무 것도 없을 때는 기본 생성자를 제공하지만, 그렇지 않는 지금과 같은 경우에는 기본생성자가 제공되지 않음!!

A::A(int n)
{
	no = n;
}

void main(void)
{
	//A aa;

	A bb(5);
}

#endif


// 1.16(구조체)를 클래스로!	=>	에러 뜨는데 다시 보자..ㅠ
#if 0
#include <iostream>
#include <time.h>
using namespace std;

#define IsLeap(Y) ((!(Y % 4) && (Y % 100)) || !(Y % 400))


class Date
{
private:
	int year, month, day, week;
public:
	Date(void); // 년, 월, 일 정보를 시스템에서 읽어오는 멤버함수
	Date(int d, int m, int y = 2019); // 년, 월, 일 정보를 인수로 전달받는 멤버함수
	void CalcDate(void); // 요일 계산하는 멤버함수
	void DisplayDate(void); // 년, 월, 일, 요일 출력하는 멤버함수
};

static int days[12] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30 };

void main(void)
{
	Date today;		// 바로 기본 생성자 함수 호출 가능
	today.DisplayDate();

	Date oneday(19, 12);
	oneday.DisplayDate();
}

Date::Date(void) // 년, 월, 일 정보를 시스템에서 읽어오는 멤버함수
{
	time_t lt;
	tm * ct;

	time(&lt);
	ct = localtime(&lt);

	year = ct->tm_year + 1900;
	month = ct->tm_mon + 1;
	day = ct->tm_mday;
	week = ct->tm_wday;

	/*
	time_t lt;
	tm cur;

	::time(&lt);				// 전역 함수 호출
	::localtime_s(&cur, &lt);	// 전역 함수 호출
	year = cur.tm_year + 1900;
	month = cur.tm_mon + 1;
	day = cur.tm_mday;
	week = cur.tm_wday;			// 0 = 일 ~ 6 = 토
	*/
}

Date::Date(int d, int m, int y) // 년, 월, 일 정보를 인수로 전달받는 멤버함수
{
	year = y;
	month = m;
	day = d;

	/*
	if (y < 1 || y > 4000) y = 1;
	year = y;
	if (IsLeap(year)) ::days[2] = 29;
	else ::days[2] = 28;
	if (m < 1 || m > 12) m = 1;
	month = m;
	if (d < 1 || d > ::days[month]) d = 1;
	day = d;
	CalcDate();
	*/
}

void Date::CalcDate(void) // 요일 계산하는 멤버함수
{
	int y, sum;
	y = year - 1;
	sum = y * 365 + (y / 4) - (y / 100) + (y / 400);
	for (int n = 1; n < month; n++) sum += ::days[n];
	sum += day;
	week = sum % 7;

	/*
	int check = (::days[month - 1] + day) % 7;
	week = check;
	*/
}

void Date::DisplayDate(void) // 년, 월, 일, 요일 출력하는 멤버함수
{
	const char * strweek[] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
	cout << year << '/' << month << '/' << day << '/' << strweek[week] << endl;

	/*
	cout << year << "/" << month << "/" << day;
	cout << " (" << week << ") " << endl;
	*/
}
#endif



// 2.3 소멸자 함수(Destructor)
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
public:
	A();
	A(int n);
	~A();
};

A::A()
{

}

A::A(int n)
{
	no = n;
}

A::~A()
{
	cout << "A::Destructor" << endl;
}

void main(void)
{
	/*
	A aa;

	A bb(5);

	A * ap = new A;
	delete ap;	// 할당이 반납되면서 이 ap->~A를 호출하게 될 것!
	*/





	A * bp = new A[3];
	cout << *(int *)((char *)bp - 16) << endl;	// 엥? 16바이트 전의 메모리에 할당 받은 메모리 정보가 없는데?
												// 소멸자가 있는 클래스로부터 동적 할당될 때는 개체 개수 정보가 있어야 하므로 아래와 같이 됨.
												// 하지만 소멸자를 없애면, 전과 동일하게 16바이트 전의 메모리에 개체들의 할당 받은 메모리 담겨 있음
												// 소멸자가 없다는 것은 굳이 개체 마무리 작업을 해야 할 의무가 없기 때문!
												// 그리고 생성자와 다르게 소멸자는 자동으로 만들어지지 않음!!

	cout << *(int *)((char *)bp - 20) << endl;	// 할당 받은 메모리 바이트 수가 담겨 있음 (16바이트)
						//=> Object 3개 12바이트와 개체 개수 정보가 담겨 있는 int 4바이트 => 합쳐서 16바이트
	
	cout << *(int *)((char *)bp - 4) << endl;	// Object의 개수 정보가 담겨 있음 (3개)
	
	delete [] bp;	// 이렇게 [] 배열로 delete를 해주면 이런 개체 개수 정보가 담겨 있는 메모리도 반환 가능!!!
	// 1) bp가 클래스 타입인가? 2) 클래스 안에 소멸자가 있는가? 3) A 클래스가 지금이 아니라 미래 만들어진다면 어떻게 할까?
	// 이런 것들을 다 판단해주어야 delete해줄 때 []를 넣어야 할지 말지 알 수 있게 된다. 귀찮으니까 "new [배열]"에는 다 delete [] 해주자!!


	/*	// 반환 방법이 다름을 알아랏!!
	ap = new A[3]{A(), A(5), A(6, 'A')};
	delete[] ap;


	A * bp[3] = { new A(), new A(5), new A(10, 'A') };
	for (int i = 0; i < 3; i++) delete bp[i];
	*/

	cout << "end main" << endl;

	// aa.~A 호출할 것
	// bb.~A 호출할 것

	// 선언과 생성자 호출, 할당, 반납과 소멸자 호출 모두 Runtime에 이루어짐!
}
#endif

// 이어서
#if 0
#include <iostream>
using namespace std;

class A
{
	int no = 5;	// int no; 이렇게만 해놓고 기본 생성자를 따로 만들지 않는다면, 디스어셈블리로 이동했을 때 생성자가 호출되지 않은 것을 볼 수 있음.
public:			// 하지만 int no = 5;라고 (초기화 아님!!) default 값을 지정해준다면, 기본 생성자 없어도 자동으로 컴파일러가 호출함!! 오오오
	//A();
};

//A::A()
//{
//
//}

void main(void)
{
	A aa;

	cout << "end main" << endl;
}

#endif




// 2.4 예약어 this
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
public:
	A(){};
	A(int n);
					// 특별히 마무리할 작업이 없다면, 소멸자는 만들 필요 없다.
	void sub(int dummy);
};

A::A(int n)
{
	no = n;		// this->no = n; 과 같은 표현임!! default이니까 생략해서 사용했던 것임

	cout << (*this).no << endl;

	cout << this << endl;		// this는 멤버함수 내에서만 사용할 수 있음!! 생성자는 당연히 멤버함수
								// 출력되는 것은 이 함수를 호출한 Object aa의 "주소"이다!
}

void A::sub(int dummy)		// "void __thiscall A::sub(int dummy)" 얘가 디폴트 형태임
{
	cout << "16B 전의 값: " << hex << *(int *)((char *)&dummy - 16) << endl;
	//*(int *)((char *)&dummy - 16) = 0;	: 이렇게 해주면 this 가 0이 됨을 알 수 있다. 즉, 같은 주소에 있다는 것을 알 수 있다
	// this는 상수처럼 사용되기 때문에 this = 0;과 같이 this에 값을 대입해주려 한다면 l-value 오류!
	cout << this << endl;
	cout << "==========둘이 같아?==========" << endl;
}


void main(void)
{
	A aa(15);		// aa.A(15)라고 aa라는 Object가 생성자를 호출한 것!
	cout << &aa << endl;
	aa.sub(0);

	A bb;
	bb.sub(0);
}

#endif

// C에서는 this 예약어는 없지만, 주소를 인자로 넘겨줌으로써 사용했다.
// 그리고 밑은 그것의 예시이다.
// 클래스는 그냥 앞에서 aa.~~();와 같이 호출을 할 수 있기 때문에 주소로 넘겨줄 필요는 없다.
#if 0
#include <stdio.h>

struct st
{
	int no;
	char ch;
};

void InitStruct(struct st * this, int n, char c); // main 안에서 함수 선언 가능 ㅋㅋ 단, main 안에서만 사용 가능!
// 값을 담아오기 위한 함수
void PrintStruct(const struct st * this);
// 값을  ★읽기★ 위한 함수 -> const를 써줌 ㅋ(상수화 시켜줌! 즉, 바꾸지 못함.
//										  하지만 C의 const는 완전한 상수화를 시켜주지 못한다고 함!)
// 재사용을 염두에 둔다면, 이렇게 사용! 가독성이 높아짐.

/* 가만히 살펴보면, 구조체가 없으면 함수는 의미가 없고, 함수가 없으면 구조체의 값을 읽거나 쓸 수 없다.
즉, 둘의 관계는 불가분의 관계이다.
=> 그럼 같이 묶어서 관리할 수는 없을까? 그렇다면 재사용에 유리하지 않을까?
=> C++에 가서는 함수를 구조체 안에 둘 수 있도록 했다! */

void main(void)
{
	struct st aa;	// 구조체 변수 선언!
	printf("size of struct st? = %d\n", sizeof(aa));	// 가장 큰 바이트인 int를 기준으로 그의 배수(=> 8바이트)

	InitStruct(&aa, 5, 'A');	// Call by Address
	PrintStruct(&aa);			// 구조체는 크기가 커서 Call by Value는 잘 사용 안함!
}

void InitStruct(struct st * this, int n, char c)
{
	this->no = n;
	this->ch = c;
}

void PrintStruct(const struct st * this)
{
	printf("You can read struct st type variable thanks to me! : ");
	printf("%d, %c\n", this->no, this->ch);
}
#endif

#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
public:
	A(){};
	A & sub(void);
	A * func(void);
	~A(){ cout << "A Destructor" << endl; };
};

A & A::sub(void)
{
	cout << "sub" << endl;
	return *this;		// A imsi = * this;	이렇게 임시 개체가 만들어짐!!
}

A * A::func(void)
{
	cout << "func" << endl;
	return this;
}


void main(void)
{
	A aa;
	aa.sub().func()->sub().sub();
	aa.func();
	// 하지만 Reference로 타입을 맞춰서 주면 개체가 하나만 만들어짐!! A aa;할 때
}

// Destructor에서 출력이 네 번이나 되는 것으로 보아 개체가 4번이나 만들어졌다는 것을 알 수 있다.
//class A
//{
//	int no;
//public:
//	A(){};
//	A sub(void);
//	A * func(void);
//	~A(){ cout << "A Destructor" << endl; };
//};
//
//A A::sub(void)
//{
//	cout << "sub" << endl;
//	return *this;		// A imsi = * this;	이렇게 임시 개체가 만들어짐!!
//}
//
//A * A::func(void)
//{
//	cout << "func" << endl;
//	return this;
//}
//
//
//void main(void)
//{
//	A aa;
//	aa.sub().func()->sub().sub();
//	aa.func();
//}
#endif

// cout의 구조를 printf로 만든 예시로 보기
#if 0
#include <iostream>
using namespace std;

struct stream
{
	stream & printf(int);
	stream & printf(char);
	stream & printf(double);
	stream & printf(const char *);
};

stream & stream::printf(int n)
{
	::printf("%d\n", n);
	return *this;
}

stream & stream::printf(char c)
{
	::printf("%c\n", c);
	return *this;
}

stream & stream::printf(double d)
{
	::printf("%lf\n", d);
	return *this;
}

stream & stream::printf(const char * str)
{
	::printf("%s\n", str);
	return *this;
}

void main(void)
{
	stream c;

	c.printf(5).printf(3.14).printf("seoul");	// cout은 이렇게 되어 있음!!
	// printf 함수가 value로 리턴했다면 그 때마다 계속 계속 개체를 생성했을 것. 비효율
}

#endif




// 2.5 포함된 개체(embedded object)와 콜론(colon, : ) 초기화
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
public:
	A(){ cout << "A Default Constructor" << endl; };
	A(int n) { no = n; cout << "A int Construct" << endl; };					// 그냥 내부에서 정의
	void sub(void) { cout << no << endl; };	// 클래스 멤버 변수를 읽기 위한 함수
};

class B
{
	char ch;
	A aa;	// 얘가 바로 "embedded object"임!!! 이 때 클래스 B를 "surrounded class"라고 함
public:
	B();
	B(char c, int n);
	void func(void);
};

B::B() //: aa()	// 컴파일러는 이렇게 인지를 하기 때문에 포함된 개체인 aa에 대해서 먼저 생성자 호출 (암묵적인 콜론 초기화)
	   //: aa(0)	//과 같이 "명시적인 콜론 초기화"도 가능! -> A(int n); 생성자로 가게 됨 ㅋ OhOh~
{ 
	cout << "B Default Constructor" << endl;
}

B::B(char c, int n) : aa(n),	// 여기도 마찬가지로 "콜론 초기화", 즉 aa의 생성자 초기화가 됨!!
						ch(c)	// ★얘도 콜론 초기화. 이 함수 내부에서 "ch = c;"는 대입! 둘은 서로 다름! 콜론 초기화가 더욱 효과적!
{ // B클래스는 A 멤버 변수에 마음대로 접근할 수 없음. 하지만 클래스 A를 보면 A(int n); 생성자가 있음!! 이것을 통해 접근!
	
	//aa = A(n);	// A라는 이름의 생성자 함수를 호출, 이에 따라 임시 오브젝트가 만들어 지고, 이는 곧 이름 없는/빈 Object.
				// => 좋은 방법의 초기화가 아님!! => ★콜론초기화가 더욱 효과적!!
	//ch = c;		// ★얘도 마찬가지로 효과적이지 못함! 콜론 초기화!
}

void B::func(void)
{
	cout << ch;
	aa.sub();	// B에서는 A의 private(default) 멤버 변수에 직접 접근 못 하므로 sub라는 public 함수 호출!
}

void gsub(B rb)	// 얘는 전역함수
{

}

void main(void)
{
	B bb;	// B 클래스로부터 개체를 만들었는데 포함된 개체의 생성자 또한 만들어짐!
			// (위 줄에 커서를 놓고 Ctrl + F10을 통해 디버깅 모드로, 그리고 F11을 누르며 어떤 순서로 실행되는지 보아라!)
			// 만약 A 클래스의 기본 생성자를 만들어주지 않았다면(or 없다면) 런타임 에러가 난닫고 함!
			// => 교훈 : 무조건 기본 생성자는 항상 만들어 두도록 한다! 아무런 코드가 없다고 하더라도!

	B bibi('A', 10);

	bibi.func();

	//B('B', 5);	// 생성자 함수를 호출한 것이지만, 멤버 함수를 호출할 수 있다는 것은 그 Object뿐!!
	B('B', 5).func();	// ★하지만 바로 .을 찍어서 함수를 호출했다면, 이건 다른 Object가 만들어진 것이라고 볼 수 있음!
	gsub(B('B', 5));	// ★임시 Object를 넘겨준 것이고, 함수가 끝나면 이 임시 Object도 소멸됨! (Stack)
}
#endif

// 참조형 멤버 데이터와 const 멤버 데이터의 콜론 초기화
#if 0
#include <iostream>
using namespace std;

int go = 5;

class A	// 이 클래스는 총 12바이트임.. 참조형 변수는 컴파일러에서 포인터랑 똑같이 인식됨. 누군가를 받아줘야 하기 때문에 4B
{
	int no = 5;
	int & ro = no;	// 최근 컴파일러에서는 클래스 내부에서 기본값을 지정해줄 수 있음!! -> 콜론 초기화 깜빡 잊고 안해도 이 Default value를 갖게 됨!! (클래스 개체 생성 시!)
					// ★하지만 이것이 "초기화"가 아니라 기본값을 주기 위함이라는 것을 알아야 함!!!
	const int co = 7;
public:
	A();
	A(int n);

};

A::A() : ro(go), co(5)	// 참조형 멤버 데이터와 const 멤버 데이터는 콜론 초기화 필수!! 안 해주면 Compile Error!
{
	// 이 안에다가 대입해주면 안되나? 안된다! 얘는 대입이고, 이는 콜론 "초기화"와 다르기 때문!!
	// const에 어떻게 대입해! 위험해
}

A::A(int n) : ro(no), co(10)	// 1)  2)
{
	no = n;						// 3) 순서로 초기화가 진행됨!
								// ro는 변수의 별명으로 삼는 것이고, int & ro = no;와 같이 식을 써줄 수 있음.
}

void main(void)
{
	A aa(7);

	int n = 5;
	int & k = n;	// 얘(k)는 생성과 동시에 초기화가 됐기 때문에 다른 저장 공간 할당되지 않음!
}
#endif





// 2.6 const 개체와 const 멤버함수
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
	char ch;
	mutable char cha;	// mutable로 선언된 멤버 변수만큼은 const 함수들도 변경시킬 수 있다고....
public:
	A(){};
	A(int n, char c) : no(n), ch(c) {};
	void sub(void);
	void sub2(void) const;
	void func(void);
	void func(void) const;
};

void A::sub(void)
{
	no = 0;
	ch = 'A';
}

void A::sub2(void) const	// 멤버 데이터의 변경은 되지 않음!
							// 이 함수가 값을 바꾸는 행위만 하지 않는다면 const 함수 뿐만 아니라 일반 함수들도 부를 수 있음!
							// 그럼 그 호출되는 함수들도 값을 변경하는 행위를 하면 안됨!
{
	cout << no << " " << ch << endl;
	// 당연히 const 함수 안에서 func호출할 수 없음!!
	// => 선언 시 "this->func();"랑 똑같은 것이다. 근데 this의 타입은 무엇인가? const A * 타입!! 그렇기에 const 함수가 아닌 함수는 호출 막아 놓음!
	
	((A *)this)->func();	// 1) 강제로 타입 캐스팅을 해주면 호출할 수 있음. 하지만 값이 변경되는 것은 각오 하고 있어야..
	func();		// 2) 오버로딩 함수..ㅋ
	// 첫 번째 방법으로 호출을 하든, 두 번째 방법으로 호출을 하든 그건 선택. 안전한 방법은 두 번째.
}

void A::func(void)
{
	no = 100;
	ch = 'Z';
}

void A::func(void) const
{
	cout << "const func" << endl;
}


void main(void)
{
	const A aa(5, 'A');	// const 개체. 항상 선언과 동시에 초기값을 주어야 하고, 변경할 수 없음!
	//aa.sub();			// 그렇기에 값을 바꿀 수 없도록 에러 메세지가 뜸! 호출을 못 하도록
						// ★값을 바꾸지 않는 함수는 호출할 수 있다!! : const함수!★ 그래서 func도 부를 수 없음!
	aa.sub2();
}
#endif


// 멤버 함수의 리턴 타입도 const....
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
public:
	A(){};
	A(int n) : no(n) {};
	const int * psub(void) const;	// "int * psub(void) const" 얘는 멤버 데이터 변수를 변경시키지 않으므로 const 함수..!
									// 하지만 리턴값인 그 주소를 이용하여 리턴을 받은 놈이 변경할 수도 있잖아?
									// 호출을 받는 이 함수 내부뿐만 아니라 호출하는 쪽엣어도 값을 변경 못 하도록!!!
									// 그것도 못 하게 막으려고 "const int * psub(void) const"로 선언!;;;
	const int & rsub(void) const;	// 얘도 받는 쪽에서 값을 변경할 수 있으므로 const ~~ const로 선언!
	const A * pfunc(void) const;
	const A & rfunc(void) const;
};

// ★ 멤버 데이터의 주소나 참조형을 리턴할 때는 const 리턴형으로 선언해주어야 에러가 뜨지 않음!! ★
const int * A::psub(void) const
{
	return &no;
}

const int & A::rsub(void) const
{
	return no;
}

const A * A::pfunc(void) const
{
	return this;
}

const A & A::rfunc(void) const
{
	return *this;
}

void main(void)
{
	A aa(5);
	cout << *(aa.psub()) << endl;
	cout << aa.rsub() << endl;
	cout << aa.pfunc() << endl;
	aa.rfunc();
}

#endif


// ★이해 잘 안됨★
// 멤버 함수를 만들면서 멤버 데이터를 바꾸지 않는다면 const 함수로 선언을 해주는 것을 고려해볼만 하지만,
// 이와 같은 경우, 모든 printf 함수를 const 함수로 만들어 버린다면 내부에 ::printf()에서 형식지정자가 그대로 고정이 되어 버려
// 유연하지 않은(?) 함수 클래스가 되어 버림..
// 이런 경우에는 const로 선언하지 않는다고...;;
#if 0
#include <iostream>
using namespace std;

struct stream
{
	stream & printf(int);
	stream & printf(char);
	stream & printf(double);
	stream & printf(const char *);
};

stream & stream::printf(int n)
{
	::printf("%d\n", n);
	return *this;
}

stream & stream::printf(char c)
{
	::printf("%c\n", c);
	return *this;
}

stream & stream::printf(double d)
{
	::printf("%lf\n", d);
	return *this;
}

stream & stream::printf(const char * str)
{
	::printf("%s\n", str);
	return *this;
}

void main(void)
{
	stream c;

	c.printf(5).printf(3.14).printf("seoul");	// cout은 이렇게 되어 있음!!
	// printf 함수가 value로 리턴했다면 그 때마다 계속 계속 개체를 생성했을 것. 비효율
}

#endif



// [다시 해보자!!]
// 하하  int * const * .... const...
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
	int * np;
public:
	A(){};
	A(int n) : no(n), np(&n) {};
	const int * GetP(void) const;
	int ** GetPP(void);
	int * const * GetPP(void) const;
	void Print(void) const;
};

int * const * A::GetPP(void) const
{
	return &np;
}

int ** A::GetPP(void)
{
	return &np;
}

const int * A::GetP(void) const
{
	return np;
}

void A::Print(void) const
{
	cout << no << endl;
}

void main(void)
{
	A aa(5);

	//int * res = aa.GetP();
	//*res = 0;	// 얘는 no 멤버 변수에 접근을 하기는 함. 하지만 컴파일러는 이거까지 신경 못 씀
	// 컴파일러는 오직 리턴되는 np값이 바뀔 여지가 있는지 여부만 판단할 뿐! 그런데 np 자체는 바뀌지 않으므로 아직까지는 const int *를 써줘야만 하는지 판단 안 섬.
	// 하지만 방금 말했다 시피 no가 변경될 여지가 잇으므로, 여기에서 리턴 타입을 const로 바꿔줘야 겠다고 판단!!!
	
	
	
	// 이거 다시 해보자! ㅋㅋㅋ
	**(aa.GetPP()) = 111;
	aa.Print();
}

#endif




// 2.7 static 멤버데이터 : 완벽한 OOP는 모든 변수가 전역이 아닌 지역으로 선언된다!!
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
public:
	static int sum;
};

/* ★★★★ */ // 선언 시 static을 쓰지 않는다!! 쓰면? : 다른 파일들의 헤더로 이것을 선언해 주었을 때, 각각의 파일마다 다른 변수가 됨!
int A::sum = 10;	// 그냥 int sum;이라고 선언하면, 이것은 전역변수 sum이라고 선언을 해준 것!!
			// 그리고 static int sum; 이라고 클래스 내에서 선언을 해주었더라도 전역에 int A::sum;이라고 다시 선언을 해주어야 함!!
			// 그리고 이 곳에서 초기화도 가능하다!!! (초기값 없으면 0으로 초기화됨!)
			// 선언되고 초기화되는 곳이 전역이므로 당연히 콜론 초기화가 불가능한 것이다!!
			// 하지만 static int sum;을 private 나 protected에 선언을 해놓으면, 접근 권한은 제한되지만, 선언은 가능!!

void main(void)
{
	A aa;

	cout << sizeof(aa) << endl;	// static 멤버는 개체의 크기에 포함되지 않음!!! 별도의 공간!!

	A bb;
	aa.sum = 0;	// 모든 A 클래스 개체들이 sum을 공유하므로 aa와 bb가 같은 값을 씀. aa가 바꾸더라도 bb의 sum값이 바뀜!
	// 그런데 이것도 public에 선언되었기 때문에 이렇게 공유가 가능한 것!!
	cout << bb.sum << endl;	// cout << sum << endl; 이라고 하면 에러 뜸!! 선언되지 않은 식별자라고 ㅋㅋ
}
#endif


// (접근권한 private의) static 멤버 데이터에 접근하기 위한 static 멤버 함수!
#if 0
#include <iostream>
using namespace std;

class A
{
	int no;
	static int sum;	// private로 선언을 했따면, 여기에 접근할 수 있는 public 함수를 만들어서 접근해야 함!!
public:
	static void sub(int s);
	static void func(void);
};

int A::sum = 10;	// 얘는 A aa;가 만들어지기 훨씬 전부터 만들어져 있는 것!
					// 그럼 A aa;가 선언되기 전에 sum에 접근하고 싶으면 어떻게 하지..?
					// => Object 없이도 sum(static 멤버 데이터)에 접근하고 싶다면, ★static 멤버함수...!★
// static 멤버함수 : Object 없이도 멤버 데이터에 접근할 수 있음!!!!

void A::sub(int s)		// 여기에서 정의해줄 때는 static void A::sub(int s) ~ 와 같이 선언할 수 없다고 함!!
{
	A::sum = s;	// sum을 사용할 때도 A::sum이라고 함!!
}

void A::func(void)
{
	cout << A::sum << endl;
}

void main(void)
{
	A::sub(5);	// static 멤버 데이터가 있다면, 자연스럽게 그 데이터에 접근하기 위한 static 함수가 따라오게 되어있음!
	A::func();

	A aa;

	cout << sizeof(aa) << endl;	// static 멤버는 개체의 크기에 포함되지 않음!!! 별도의 공간!!

	aa.sub(0);	// sum을 0으로 바꾸고
	aa.func();	// sum을 출력
}
#endif




// ★★ 전체적인 구조 이해!! ★★
// 2.8 static 멤버함수
// 생성자를 private 권한으로.. -> 어디서나 자유롭게 Object를 만들지 못하도록
#if 0
#include <iostream>
using namespace std;

class CMainFrame	// MFS에서 제공하는 기본 클래스 중 하나!
{
	CMainFrame();	// 어디서나 자유롭게 Object를 만들지 못하도록 public에서 private로 감춰버림!!
					// 생성자를 이렇게 감춰둔 이유? : 동적으로 Object를 만들고 삭제하고 할 수 있도록!
public:
	static CMainFrame * CreateObject(void);	// 바깥에다가 static으로 함수 선언 Nope!
	~CMainFrame();
	void ShowWindow(void);
	void DestroyWindow(void);
};

CMainFrame * CMainFrame::CreateObject(void)	// Object(개체) 만들어지기 전에도 클래스에 접근 가능!! -> CMainFrame에 접근할 것이다!
{
	return (new CMainFrame);
}

CMainFrame::CMainFrame()
{
	cout << "Create CMainFrame" << endl;
}

CMainFrame::~CMainFrame()
{
	cout << "Bye CMainFrame" << endl;
}

void CMainFrame::ShowWindow(void)
{
	cout << "Show CMainFrame" << endl;
}

void CMainFrame::DestroyWindow(void)
{
	cout << "Destroy CMainFrame" << endl;

	delete this;	// 여기서!!
}

void main(void)
{
	CMainFrame * pFrame = CMainFrame::CreateObject();
	
	pFrame->ShowWindow();		// 
	pFrame->DestroyWindow();	// 사용자가 우측 상단에 X(close) 버튼을 누르면 실행됨

	//delete pFrame;		=> 근데 여기서 delete 하지 않더라도 delete 되게 할 수 없을까?
							// => DestroyWindow(즉, x클릭으로 끌 때)에서 하면 되잖아?
}
#endif

// 더 좋은 방법이 있대 ㅋㅋ => 이게 뭐지?
#if 0
#include <iostream>
using namespace std;

class CMainFrame
{
	//CMainFrame();
public:
	CMainFrame() = delete;
	static CMainFrame * CreateObject(void);
	~CMainFrame();
	void ShowWindow(void);
	void DestroyWindow(void);
};

CMainFrame * CMainFrame::CreateObject(void)	
{
	return (new CMainFrame);
}

CMainFrame::CMainFrame()
{
	cout << "Create CMainFrame" << endl;
}

CMainFrame::~CMainFrame()
{
	cout << "Bye CMainFrame" << endl;
}

void CMainFrame::ShowWindow(void)
{
	cout << "Show CMainFrame" << endl;
}

void CMainFrame::DestroyWindow(void)
{
	cout << "Destroy CMainFrame" << endl;

	delete this;
}

void main(void)
{
	CMainFrame * pFrame = CMainFrame::CreateObject();

	pFrame->ShowWindow(); 
	pFrame->DestroyWindow();
}
#endif





// friend 함수 
#if 01
#include <iostream>
using namespace std;

class A;	// B에게 A는 클래스야! 라고 알려주는 느낌

class B		// Bsub 함수 안에다가 써도 됨!
{
public:
	void Bsub(class A * ap);
};

class A
{
	int no;
public:
	A(){};
	A(int n) : no(n) {};
	void sub(void) const;
	friend void Gsub(const A & ra);	// 전역변수를 멤버 있는 쪽에 friend로 선언해두면, private한 접근까지도 허용해줌!
	friend void B::Bsub(A * ap);	// 일단 다른 클래스의 멤버이므로 스코프는 꼭 써줘야 해!!
};

void A::sub(void) const
{
	cout << no << endl;
}

void Gsub(const A & ra)	// 전역함수 , 참조로 받아줌(새로운 공간 할당 안해주기 위하여!)
{
	//cout << ra.no << endl;	// private 권한이라 no에 대한 접근 못함!!
							// 그런데 이 전역함수를 멤버 안에다가 friend로 선언해놓으면 접근 가능..!! 오오

	ra.sub();			// 그런데 위에서처럼 멤버 변수를 그대로 노출시키기 위해 사용하면 좋지 않음..
						// 물론 결과적으로는 똑같더라도, 값을 바꿀 수 없도록 sub 함수에 접근하여 이용하는 것이 더욱 좋음!!
}

void B::Bsub(A * ap)
{
	ap->sub();	// 엥? 잠시만, 바로 접근하려고?? 친구하자!하고 A 쪽으로 감
}

void main(void)
{
	A aa(58);

	Gsub(aa);

	B bb;
	bb.Bsub(&aa);
}

#endif
