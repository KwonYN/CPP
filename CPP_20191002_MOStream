// <MOStream.h>
#pragma once
#ifndef _MOSTREAM_H_
#define _MOSTREAM_H_

//    0    1    2    3
enum ftype { oct, dec, hex, endl };	// 위치 중요!

class MOStream
{
	const char * format;
public:
	MOStream() = delete;					// 지원질 함수로 만듬!! =>  함부로 Object 생성하지 못 하도록!
	MOStream(const MOStream &) = delete;	// 복사 생성자도 삭제를 해줘야됨!!
	MOStream(const char * f);
	~MOStream();
	MOStream & operator <<(int n);
	MOStream & operator <<(double d);
	MOStream & operator <<(char c);
	MOStream & operator <<(const char * str);
	MOStream & operator <<(const void * addr);
	MOStream & operator <<(ftype t);
};

extern MOStream cout;


#endif // _MOSTREAM_H_





// <MOStream.cpp>

#include <stdio.h>
#include "MOStream.h"

MOStream cout("%d");

//MOStream::MOStream()
//{
//	format = "%d";
//}

MOStream::MOStream(const char * f)
{
	format = f;
}



MOStream::~MOStream()
{
}


// 
MOStream & MOStream::operator <<(int n)
{
	::printf(format, n);
	
	return *this;
}

MOStream & MOStream::operator <<(double d)
{
	::printf("%.2lf", d);

	return *this;
}

MOStream & MOStream::operator <<(char c)
{
	::printf("%c", c);

	return *this;
}

MOStream & MOStream::operator <<(const char * str)
{
	::printf("%s", str);

	return *this;
}

MOStream & MOStream::operator <<(const void * addr)
{
	::printf("%#x", addr);

	return *this;
}

MOStream & MOStream::operator <<(ftype t)
{
	// const 꼭 적어줘야 함! RT 때 혹시나 값이 바뀌게 된다면 RTE 뜸
	const char * fftype[] = { "%#o", "%d", "%#x" };

	if (t == endl)
	{
		::printf("\n");
		::fflush(stdout);
	}
	else format = fftype[t];

	return *this;
}






// <Main.cpp>
// cout을 정의해보자!
#include "MOStream.h"

void sub(int);
void sub(double) = delete;	// 

void main(void)
{
	char ch;
	int nn;
	double dd;

	cout << 5 << 'A' << 3.14 << "seoul" << (void *)&ch << &nn << &dd << endl;
	cout << hex << 10 << endl;
	cout << oct << 10 << endl;
	cout << dec << 0x11 << endl;

	//MOStream b;		// 이러면 안 만들어짐.
	MOStream c(0);	// 이래야 만들어짐.


	sub(5);
	sub('A');
	//sub(3.14);

}


void sub(int n)
{
	cout << n << endl;
}
